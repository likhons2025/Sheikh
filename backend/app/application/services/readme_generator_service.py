import github
from app.application.schemas.readme_schemas import ReadmeRequest

class ReadmeGeneratorService:
    def __init__(self, template_path="backend/app/domain/prompts/readme_template.txt"):
        # In a real application, this path would be handled more robustly
        # (e.g., via a configuration object).
        self.template_path = template_path
        self.template = self._load_template()

    def _load_template(self) -> str:
        try:
            with open(self.template_path, "r") as f:
                return f.read()
        except FileNotFoundError:
            # Proper logging should be implemented here in a real app.
            print(f"Error: Template file not found at {self.template_path}")
            return ""

    def generate_readme_content(self, request: ReadmeRequest) -> str:
        """
        Generates the full content of a README.md file based on a request.
        """
        if not self.template:
            return "Error: README template is missing."

        # In a real implementation, these sections would be generated by an AI model.
        # For now, we are using placeholder text with some basic info from the request.
        installation_content = self._generate_installation_instructions(request)
        usage_content = self._generate_usage_examples(request)
        contributing_content = self._generate_contributing_guidelines(request)

        readme_content = self.template.format(
            project_name=request.repo_name,
            description=request.repo_description,
            installation=installation_content,
            usage=usage_content,
            contributing=contributing_content,
            license=request.license or "N/A" # Handle optional license
        )

        return readme_content

    def _generate_installation_instructions(self, request: ReadmeRequest) -> str:
        """
        (Mock) Generates installation instructions.
        This would be a call to an AI model in a real implementation.
        """
        return (f"To install the dependencies for **{request.repo_name}**, clone the repository and "
                f"use your favorite package manager.\n\n"
                f"For example, using pip:\n"
                f"```bash\n"
                f"pip install -r requirements.txt\n"
                f"```")

    def _generate_usage_examples(self, request: ReadmeRequest) -> str:
        """
        (Mock) Generates usage examples.
        This would be a call to an AI model in a real implementation.
        """
        return (f"To run **{request.repo_name}**, execute the main script from the project root:\n\n"
                f"```bash\n"
                f"python main.py\n"
                f"```")

    def _generate_contributing_guidelines(self, request: ReadmeRequest) -> str:
        """
        (Mock) Generates contributing guidelines.
        This would be a call to an AI model in a real implementation.
        """
        return ("Contributions are what make the open source community such an amazing place to learn, "
                "inspire, and create. Any contributions you make are **greatly appreciated**.\n\n"
                "1. Fork the Project\n"
                "2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n"
                "3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n"
                "4. Push to the Branch (`git push origin feature/AmazingFeature`)\n"
                "5. Open a Pull Request")

    def create_readme_on_github(self, repo_full_name: str, content: str, github_token: str) -> bool:
        """
        Creates or updates a README.md file in a specified GitHub repository.

        :param repo_full_name: The full name of the repository (e.g., "user/repo").
        :param content: The content of the README.md file.
        :param github_token: A GitHub personal access token with repo scope.
        :return: True if successful, False otherwise.
        """
        try:
            g = github.Github(github_token)
            repo = g.get_repo(repo_full_name)

            # Check if README.md already exists
            try:
                existing_file = repo.get_contents("README.md")
                # If it exists, update it
                repo.update_file(
                    path="README.md",
                    message="docs: Update README.md",
                    content=content,
                    sha=existing_file.sha,
                    branch="main" # Assuming 'main' is the default branch
                )
                print(f"Successfully updated README.md in {repo_full_name}")
            except github.UnknownObjectException:
                # If it does not exist, create it
                repo.create_file(
                    path="README.md",
                    message="docs: Create README.md",
                    content=content,
                    branch="main" # Assuming 'main' is the default branch
                )
                print(f"Successfully created README.md in {repo_full_name}")

            return True

        except github.GithubException as e:
            print(f"An error occurred with the GitHub API: {e}")
            return False
        except Exception as e:
            print(f"An unexpected error occurred: {e}")
            return False
